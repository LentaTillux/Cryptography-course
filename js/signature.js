var signature = function () {
  initialize();                 // загружаем в body все div'ы, создаём холст, задаём его параметры, загружаем меню, объявляем переменные
  loadMenu(signatureSlide);     // загрузить меню с иконками "вперёд", "назад", "домой" и "повторить"
  n = 0;                        // номер слайда
  signatureSlide(n, s);         // запускаем начальный слайд
};

var signatureSlide = function (n, s) {     // загрузить слайд №n на холст s
  $("#drawbox").off();              // убираем событие click с drawbox
  switch(n) {
//====================== слайд 1 ======================
    case 0:
      s.clear();
      stopAllTimers();                   // останавливаем все запущенные таймауты и интервалы
      var subslide = 0;                 // номер подслайда в этом слайде, переключается по щелчку мышью
      s.attr({"opacity": 0}).animate({"opacity": 1}, 1000);
      Snap.load("images/signature/0.svg", function (f) {
        s.append(f);
      });

      clickToContinue();                 // показываем мигающую мышь
      $("#drawbox").click(function() {   // по щелчку на блоке с рисунком
        // останавливаем все таймеры и убираем мигающую мышь
        stopAllTimers();
        s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь
        $("#drawbox").off();              // убираем событие click с drawbox

        // показываем следующий слой:
        s.selectAll("g[inkscape\\:label='Layer 1']").attr({"display": "none"});
        s.selectAll("g[inkscape\\:label='Layer 2']").attr({"display": "inline"});

        $("#textbox").html("<p>С появлением асимметричной криптографии стало возможно осуществить такую электронная подпись, которая обеспечивает:</p><p><b>Авторство</b>. Любой может удостовериться, что подпись поставил именно тот человек, которому она принадлежит.</p><p><b>Целостность</b>. Невозможность изменения документа после того, как поставлена подпись.</p><p><b>Неотказуемость</b>. От подписи в дальнейшем нельзя отказаться.</p><p><b>Уникальность</b>. Подпись нельзя скопировать на другие документы. Для каждого документа она уникальна.</p>");
      });

      $("#textbox").html("<p>На бумажных документах собственноручная подпись является довольно неплохим доказательством того, что её сделал тот человек, кому она принадлежит. Чтобы в точности подделать подпись, необходимо обладать определённым мастерством.</p><p>Для электронных же документов простое отсканированное изображение подписи, очевидно, не годится – так как её копирование в данном случае упрощается до безобразия. Ева (от англ. \"eavesdropper\") в таком случае может использовать изображение подписи Алисы для подписания любых электронных документов.</p>");
      break;

//====================== слайд 2 ======================
    case 1:
      s.clear();
      stopAllTimers();                // останавливаем все запущенные таймауты и интервалы
      var subslide = 0;                 // номер подслайда в этом слайде, переключается по щелчку мышью
      s.attr({"opacity": 0}).animate({"opacity": 1}, 1000);
      Snap.load("images/signature/1.svg", function (f) {
        s.append(f);
      });

      clickToContinue();                 // показываем мигающую мышь
      $("#drawbox").click(function() {   // по щелчку на блоке с рисунком
        switch(subslide) {
          case 0:
            // показываем сложение по модулю два:
            s.selectAll("g[id='g0']").attr({"opacity": "1"});
            // скрываем буквы рядом с их двоичным представлением:
            s.selectAll("g[id='text0']").attr({"opacity": "0"});
            $("#textbox").html("<p>Функция s_hash складывает байты по модулю два.</p><p>Таким образом тексту <b>\"It's a text.\"</b> соотвествует двоичный хэш <b>00111011</b> при использовании хэш-функции s_hash.</p><p>Существуют множество различных хэш-функций, каждая из которых использует свой уникальный алгоритм преобразования. Если использовать другую хэш-функцию, то результат будет другим.</p>");
            subslide++;
            break;

          case 1:
            // останавливаем все таймеры и убираем мигающую мышь
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь
            $("#drawbox").off();              // убираем событие click с drawbox

            // показываем следующий слой:
            s.selectAll("g[inkscape\\:label='Layer 1']").attr({"display": "none"});
            s.selectAll("g[inkscape\\:label='Layer 2']").attr({"display": "inline"});
            
            // показваем поле ввода:
            inputArea(186, 438, "translate(251,108)");

            $("#textbox").html("<p>Попробуйте вводить текст в поле ввода и наблюдать за тем, как изменяется его хэш.</p>");
            subslide++;
            break;
        }
      });

      $("#textbox").html("<p>Электронную подпись ставят обычно не на сам текст, а на его сжатое представление, полученное с помощью хэш-функции. <b>Хэш-функция</b> преобразует входной массив данных произвольной длины в строку фиксированной длины (хэш).</p><p>Простейшей хэш-функцией является простое сложение по модулю два байтов входного массива.</p><p>Назовём такую хэш-функцию <b>s_hash</b> (simple hash). Предварительно текст (или любая другая информация) переводится в последовательность байтов, а затем эта последовательность подаётся в хэш-функцию.</p>");
      break;

//====================== слайд 3 ======================
    case 2:
      s.clear();
      stopAllTimers();                // останавливаем все запущенные таймауты и интервалы
      s.attr({"opacity": 0}).animate({"opacity": 1}, 1000);
      Snap.load("images/signature/2.svg", function (f) {
        s.append(f);
      });

      $("#textbox").html("<p>Из всего множества хэш-функций выделяют <b>криптографические</b>, которые удовлетворяют четырём приведённым условиям.</p><p>Хэш-функция s_hash быстро выполняется, однако длина хэша составляет 8 бит, то есть для бесконечного множества сообщений существует всего лишь 256 вариантов хэша, поэтому даже простым перебором несложно найти сообщение, которое соотвествует заданному хэшу, или изменить сообщение так, чтобы его хэш не изменился, или найти два сообщения с одинаковым хэшем. Поэтому функцию s_hash в криптографии использовать нельзя.</p><p>Распространённые криптографические хэш-функции:<br>– MD5 (распространена, но уже считается ненадёжной);<br>– SHA-2;<br>– SHA-3;<br>– RIPEMD;<br>– Skein;<br>– Whirlpool.</p>");
      break;

//====================== слайд 4 ======================
    case 3:
      s.clear();
      stopAllTimers();                // останавливаем все запущенные таймауты и интервалы
      var subslide = 0;                 // номер подслайда в этом слайде, переключается по щелчку мышью
      s.attr({"opacity": 0}).animate({"opacity": 1}, 1000);
      Snap.load("images/signature/3.svg", function (f) {
        s.append(f);
      });

      clickToContinue();                 // показываем мигающую мышь
      $("#drawbox").click(function() {   // по щелчку на блоке с рисунком
        switch(subslide) {
          case 0:
            // показываем шифрование закрытым ключом:
            s.selectAll("g[id='g1']").attr({"opacity": "1"});
            s.selectAll("g[id='g2']").attr({"opacity": "1"});
            $("#textbox").html("<p>Хэш зашифровывается с помощью закрытого ключа. Зашифрованный хэш и является <b>электронной подписью</b> этого сообщения.</p><p>Хэш зачастую гораздо меньше по размеру, чем сам документ и алгоритмы вычисления хэша являются более быстрыми, чем алгоритмы ЭП. Поэтому формировать хэш документа и подписывать его получается намного быстрее, чем подписывать сам документ.</p><p>Хэш-функция не является частью алгоритма ЭП, поэтому в схеме может быть использована любая надёжная хэш-функция.</p>");
            subslide++;
            break;

          case 1:
            // останавливаем все таймеры и убираем мигающую мышь до окончания субслайда: 
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь

            timeOuts.push(setTimeout(function(){
              clickToContinue();                 // показываем мигающую мышь
            } , 800));
            
            // скрываем хэш:
            s.selectAll("g[id='g0']").animate({"opacity": "0"}, 400);
            s.selectAll("g[id='g1']").animate({"opacity": "0"}, 400);

            timeOuts.push(setTimeout(function(){
              // перемещаем подпись вверх:
              s.selectAll("g[id='g2']").animate({"transform": "translate(0,-285)"}, 400);
            } , 200));

            timeOuts.push(setTimeout(function(){
              // показываем стрелку "к Бобу":
              s.selectAll("g[id='g3']").animate({"opacity": "1"}, 200);
            } , 600));

            $("#textbox").html("<p>Алиса отправляет сообщение и электронную подпись Бобу.<p>Теперь она может не опасаться, что сообщение кто-то изменит, не нарушив при этом электронную подпись.</p>");
            subslide++;
            break;

          case 2:
            // останавливаем все таймеры и убираем мигающую мышь до окончания субслайда: 
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь

            timeOuts.push(setTimeout(function(){
              clickToContinue();                 // показываем мигающую мышь
            } , 1400));

            // показываем следующий слой:
            s.selectAll("g[inkscape\\:label='Layer 1']").attr({"display": "none"});
            s.selectAll("g[inkscape\\:label='Layer 2']").attr({"display": "inline"});

            timeOuts.push(setTimeout(function(){
              // показывает сообщение на стороне Боба:
              s.selectAll("g[id='g9']").animate({"opacity": "1"}, 300);
            } , 300));

            timeOuts.push(setTimeout(function(){
              // показываем эл. подпись:
              s.selectAll("g[id='g4']").animate({"opacity": "1"}, 300);
            } , 1100));

            $("#textbox").html("<p>У Боба есть открытый ключ Алисы. Он должен быть точно уверен, что это её ключ.</p><p>Боб принимает сообщение и электронную подпись.</p>");
            subslide++;
            break;

          case 3:
            // завершаем предыдущие анимации:
            stopAllTimers();
            stopAllAnimations();
            s.selectAll("g[id='g9']").attr({"opacity": "1"});
            s.selectAll("g[id='g4']").attr({"opacity": "1"});
            // запускаем мигающую мышь:
            clickToContinue();
            // перемещаем электронную подпись вниз:
            s.selectAll("g[id='g4']").animate({"transform": "translate(0,-195)"}, 300);

            timeOuts.push(setTimeout(function(){
              // показываем расшифрованный хэш:
              s.selectAll("g[id='g6']").animate({"opacity": "1"}, 300);
            } , 200));

            $("#textbox").html("<p>Расшифровывает хэш открытым ключом Алисы.</p><p>Открытый и закрытый ключ являются как бы взаимно обратными: если что-то было зашифровано закрытым ключом, то расшифровывают это открытым ключом и наоборот, если что-то зашифровано открытым ключом, то расшифровать можно закрытым.</p>");
            subslide++;
            break;

          case 4:
            // останавливаем все таймеры и убираем мигающую мышь
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь
            $("#drawbox").off();              // убираем событие click с drawbox

            // завершаем предыдущие анимации:
            stopAllAnimations();
            s.selectAll("g[id='g4']").attr({"transform": "translate(0,-195)"});
            s.selectAll("g[id='g6']").attr({"opacity": "1"});

            //прячем процесс расшифрования эл. подписи:
            s.selectAll("g[id='g4']").animate({"opacity": "0"}, 300);
            s.selectAll("g[id='g7']").animate({"opacity": "0"}, 300);

            timeOuts.push(setTimeout(function(){
              // показываем вычисленный хэш:
              s.selectAll("g[id='g5']").animate({"opacity": "1"}, 300);
            } , 600));

            timeOuts.push(setTimeout(function(){
              // показываем то, что хэши равны:
              s.selectAll("g[id='g11']").animate({"opacity": "1"}, 300);
            } , 1100));

            $("#textbox").html("<p>Боб вычисляет хэш сообщения и сравнивает его с расшифрованным из электронной подписи. Если они совпадают, то он может быть уверен, что Алиса подписывала именно это сообщение.</p><p>Также Боб может доказать любому (банку, например), что Алиса действительно выписала ему чек, предъявив это сообщение и его ЭП (открытый ключ Алисы должен быть известен банку).</p><p>Для того, чтобы подделать подпись, злоумышленнику нужно либо подобрать сообщение с таким же хэшем, но другим содержанием (что невозможно при использовании надёжной криптографической хэш-функции), либо каким-либо образом заполучить закрытый ключ Алисы, который она надёжно хранит и никогда никому не передаёт.</p>");
            subslide++;
            break;
        }
      });

      $("#textbox").html("<p>Рассмотрим схему алгоритма создания электронной подписи и её проверки.</p><p>Предварительно Алиса с помощью алгоритма электронной подписи генерирует пару ключей – открытый и закрытый. Закрытый ключ необходим для подписывания документа, а открытый – для проверки подписи. Поэтому, как и при асимметричном шифровании, закрытый ключ необходимо держать в секрете, а открытый можно свободно распространять.</p><p>Далее от сообщения вычисляется хэш с помощью криптографической хэш-функции. Сообщением может быть не только текст, но и любая последовательность байтов, будь то документ, архив, видео, изображение, аудиозапись и т.д.</p>");
      break;

//====================== слайд 5 ======================
    case 4:
      s.clear();
      stopAllTimers();                // останавливаем все запущенные таймауты и интервалы
      var subslide = 0;                 // номер подслайда в этом слайде, переключается по щелчку мышью
      s.attr({"opacity": 0}).animate({"opacity": 1}, 1000);
      Snap.load("images/signature/4.svg", function (f) {
        s.append(f);
      });

      clickToContinue();                 // показываем мигающую мышь
      $("#drawbox").click(function() {   // по щелчку на блоке с рисунком
        switch(subslide) {
          case 0:
            // останавливаем все таймеры и убираем мигающую мышь до окончания субслайда: 
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь

            timeOuts.push(setTimeout(function(){
              clickToContinue();                 // показываем мигающую мышь
            } , 1000));

            // прячем надпись "Открытый текст":
            s.selectAll("text[id='text0']").animate({"opacity": "0"}, 300);
            timeOuts.push(setTimeout(function(){
              // перемещаем ключ к Виктору:
              s.selectAll("g[id='key']").animate({"transform": "translate(340,-195)"}, 500);
            } , 500));

            $("#textbox").html("<p>Алиса хорошо знает Виктора, поэтому просит его подтвердить, что это её открытый ключ. Виктор ставит электронную подпись на сообщение, в которое входит: открытый ключ Алисы, её ФИО, контактные данные и прочая информация. Такое подписанное сообщение называется <b>сертификатом</b>.</p><p>Таким образом своей подписью Виктор связывает данные Алисы с её открытым ключом.</p>");
            subslide++;
            break;

          case 1:
            // останавливаем все таймеры и убираем мигающую мышь до окончания субслайда: 
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь

            timeOuts.push(setTimeout(function(){
              clickToContinue();                 // показываем мигающую мышь
            } , 1100));

            // завершаем предыдущие анимации:
            stopAllAnimations();
            s.selectAll("text[id='text0']").attr({"opacity": "0"}, 300);
            s.selectAll("g[id='key']").attr({"transform": "translate(340,-195)"}, 500);

            // показываем подпись Виктора на ключе:
            s.selectAll("g[id='sig0']").animate({"opacity": "1"}, 200);
            timeOuts.push(setTimeout(function(){
              // перемещаем ключ к Алисе:
              s.selectAll("g[id='key']").animate({"transform": "translate(65,-65)"}, 500);
            } , 600));

            subslide++;
            break;

          case 2:
            // останавливаем все таймеры и убираем мигающую мышь до окончания субслайда: 
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь

            timeOuts.push(setTimeout(function(){
              clickToContinue();                 // показываем мигающую мышь
            } , 1600));

            // завершаем предыдущие анимации:
            stopAllAnimations();
            s.selectAll("g[id='sig0']").attr({"opacity": "1"});
            s.selectAll("g[id='key']").attr({"transform": "translate(65,-65)"});

            // перемещаем ключ к Григорию:
            s.selectAll("g[id='key']").animate({"transform": "translate(342,104)"}, 500);

            timeOuts.push(setTimeout(function(){
              // показываем подпись:
              s.selectAll("g[id='sig1']").animate({"opacity": "1"}, 200);
            } , 700));

            timeOuts.push(setTimeout(function(){
              // перемещаем ключ к Алисе:
              s.selectAll("g[id='key']").animate({"transform": "translate(65,-65)"}, 500);
            } , 1100));

            $("#textbox").html("<p>Полученный сертификат могут подписывать все её знакомые. Чем больше подписей, тем лучше.</p>");
            subslide++;
            break;

          case 3:
            // останавливаем все таймеры и убираем мигающую мышь
            stopAllTimers();
            s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь
            $("#drawbox").off();              // убираем событие click с drawbox

            // завершаем предыдущие анимации:
            stopAllAnimations();
            s.selectAll("g[id='sig1']").attr({"opacity": "1"});
            s.selectAll("g[id='key']").attr({"transform": "translate(65,-65)"});

            // перемещаем ключ к Бобу:
            s.selectAll("g[id='key']").animate({"transform": "translate(750,-60)"}, 600);
            $("#textbox").html("<p>Боб, получив сертификат Алисы, видит, что помимо всех прочих, он подписан его знакомыми Виктором и Григорием, которым он доверяет: они не могли сговориться и подписать сертификат злоумышленника, который выдаёт себя за Алису. Также он верит в то, что они не подписывают сертификаты без разбора.</p><p>Таким образом, Боб может быть уверен, что полученный ключ принадлежит Алисе, а не кому-либо другому.</p>");
            break;
        }
      });

      $("#textbox").html("<p>Электронные подписи также решают проблему распределения ключей.</p><p>Допустим, что Бобу нужно узнать открытый ключ Алисы, но он знает её недостаточно хорошо и, следовательно, может перепутать её со злоумышленником, который представился её именем и отправил свой ключ. Эту проблему передачи ключа можно решить, если Боб и Алиса входят в перекрывающиеся <b>сети доверия</b> (англ. \"Web of trust\").</p><p>Это означает, что у Боба и Алисы есть общие знакомые Виктор и Григорий, с которыми они давно обменялись открытыми ключами и каким-либо надёжным образом убедились, что они именно те, за кого себя выдают. То есть Боб и Алиса точно знают, что открытые ключи Виктора и Григория были действительно созданы Виктором и Григорием, а не кем-то другим.</p>");
      break;

//====================== слайд 6 ======================
    case 5:
      s.clear();
      stopAllTimers();                // останавливаем все запущенные таймауты и интервалы
      var subslide = 0;                 // номер подслайда в этом слайде, переключается по щелчку мышью
      s.attr({"opacity": 0}).animate({"opacity": 1}, 1000);
      Snap.load("images/signature/5.svg", function (f) {
        s.append(f);
      });

      clickToContinue();                 // показываем мигающую мышь
      $("#drawbox").click(function() {   // по щелчку на блоке с рисунком
        // останавливаем все таймеры и убираем мигающую мышь
        stopAllTimers();
        s.selectAll("g[inkscape\\:label='mouse']").attr({"display": "none"});  // прячем мышь
        $("#drawbox").off();              // убираем событие click с drawbox

        // убираем стрелку и подпись около ключа Алисы:
        s.selectAll("g[id='g0']").animate({"opacity": "0"}, 200);
        // перемещаем ключ к Бобу:
        s.selectAll("g[id='key']").animate({"transform": "translate(700,0)"}, 600);

        timeOuts.push(setTimeout(function(){
          // показываем стрелку от корневого ЦС:
          s.selectAll("path[id='path0']").animate({"opacity": "1"}, 200);
        } , 600));

        $("#textbox").html("<p>Открытые ключи корневых ЦС широко распространены и встраиваются производителями в прошивки, программное обеспечение, операционные системы.</p><p>Боб проверяет цепочку сертификатов Алисы и видит, что заканчивается она сертификатом известного ему корневого ЦС. Таким образом, учитывая наследуемое \"доверие\" от корневого ЦС, он может быть уверен, что это открытый ключ Алисы.</p>");
        subslide++;
      });

      $("#textbox").html("<p>На данный момент значительное распространие всё же получила <b>иерархическая схема распределения открытых ключей</b>.</p><p>Она представляет собой иерархию центров сертификации (ЦС). Вышестоящие ЦС проверяют ЦС рангом ниже и подписывают их сертификаты, если эти ЦС удовлетворяют всем требованиям. Таким образом, аккредитованные ЦС наследуют \"доверие\" от вышестоящей организации.</p><p>Выдающий ЦС проверяет личность Алисы и подписывает её сертификат. Таким образом, её сертификат оказывается заверенным всей цепочкой ЦС, вплоть до корневого.</p>");
      break;

    case -1:                                // если нажали "назад" до первого слайда
    case 6:                                 // если нажали "вперёд" после последнего слайда
      s.clear();
      stopAllTimers();                      // останавливаем все запущенные таймауты и интервалы
      contents();                           // переходим на главную, к содержанию курса
      break;

  }
};
